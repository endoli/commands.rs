var searchIndex = {};
searchIndex["commands"] = {"doc":"# Commands","items":[[0,"command_table","commands","# Command Tables",null,null],[3,"CommandTableEntry","commands::command_table","Information about a command in a command table.",null,null],[12,"name","","Name of a command. This is used for command line entry.",0,null],[12,"command","","The underlying command that can be executed.",0,null],[3,"CommandTable","","A group of related commands",null,null],[12,"name","","The name of the command table",1,null],[12,"inherit","","Tables inherited by this table",1,null],[12,"commands","","Commands in this table",1,null],[12,"menu_definition","","Menu description",1,null],[8,"Command","","A command",null,null],[10,"execute","","Execute the command",2,{"inputs":[{"name":"command"}],"output":null}],[11,"new","","Construct a `CommandTable`.",1,{"inputs":[{"name":"string"},{"name":"vec"},{"name":"vec"}],"output":{"name":"rc"}}],[0,"menu_definition","commands","# Menu Definitions",null,null],[3,"MenuDefinition","commands::menu_definition","The definition to be used to generate a menu or\ntoolbar in whatever GUI framework is being used.",null,null],[12,"items","","The items in the menu. Ordered vector.",3,null],[4,"MenuItem","","Types of menu items.",null,null],[13,"Separator","","A separator item in a menu.",4,null],[0,"parser","commands","# Command Parser",null,null],[3,"Command","commands::parser","Description of a command to be added to the [`CommandTree`].",null,null],[3,"CommandTree","","Store a command tree while populating it. This is used\nto construct a [`RootNode`] to be used with the [`Parser`].",null,null],[3,"Parameter","","Description of a parameter to be added to the [`Command`].",null,null],[3,"Completion","","Represents the result of completing a node. Each valid completion\nis represented by a [`CompletionOption`].",null,null],[12,"help_symbol","","Value placeholder for help.",5,null],[12,"help_text","","Main help text.",5,null],[12,"token","","Token used to hint the completion, if provided.",5,null],[12,"exhaustive","","Was this completion exhaustive? If yes, then only\nthe given completion options are valid.",5,null],[12,"options","","The actual completion options.",5,null],[3,"CompletionOption","","Represents a single option returned by `complete`.",null,null],[12,"option_string","","String for this option.",6,null],[12,"complete","","True if this option is complete and a valid value.",6,null],[3,"TreeNode","","A parse tree node.",null,null],[12,"name","","The name of this node.",7,null],[12,"help_symbol","","The text used to identify this node in help text.\nThis is typically the node name, either in plain\nform or decorated for parameters.",7,null],[12,"help_text","","Help text describing this node.",7,null],[12,"hidden","","Hidden nodes are not completed. This doesn&#39;t modify matching.",7,null],[12,"priority","","Match and complete priority.",7,null],[12,"repeatable","","Whether or not this node can be repeated. A repeated\nnode can be `accept`ed multiple times.",7,null],[12,"repeat_marker","","If present, this node will no longer be `acceptable`.",7,null],[12,"successors","","Possible successor nodes. Collected while building.",7,null],[3,"CommandNode","","A node representing a command. Constructed via [`Command`] and [`CommandTree`].",null,null],[12,"node","","[`TreeNode`] data.",8,null],[12,"handler","","The handler which is executed once this node has been accepted.",8,null],[12,"parameters","","Parameter nodes for this command",8,null],[12,"wrapped_root","","If present, the command wrapped by this node.",8,null],[3,"ParameterNameNode","","A node that represented the name portion of a named\nparameter.",null,null],[12,"node","","[`TreeNode`] data.",9,null],[12,"parameter","","The `parameter` named by this node.",9,null],[3,"ParameterNode","","A node representing a parameter for a command.",null,null],[12,"node","","[`TreeNode`] data.",10,null],[12,"required","","A `required` parameter must be supplied for the\ncommand line being parsed to be valid.",10,null],[12,"kind","","What type of `ParameterKind` this is.",10,null],[3,"RootNode","","The root of a command tree.",null,null],[12,"node","","[`TreeNode`] data.",11,null],[3,"Parser","","Command parser",null,null],[12,"nodes","","The nodes which have been accepted during `parse` or `advance`.",12,null],[12,"tokens","","The tokens which have been accepted during `parse` or `advance`.",12,null],[4,"ParameterKind","","Indicate the type of parameter, so that the correct class and node\nstructures are created.",null,null],[13,"Flag","","This parameter is a flag parameter.",13,null],[13,"Named","","This parameter is a named parameter.",13,null],[13,"Simple","","This parameter is a simple parameter.",13,null],[4,"Node","","Enumeration of node types used to have vectors of `Node` and so on.",null,null],[13,"Command","","`Node` variant wrapping a `CommandNode`.",14,null],[13,"Parameter","","`Node` variant wrapping a `ParameterNode`.",14,null],[13,"ParameterName","","`Node` variant wrapping a `ParameterNameNode`.",14,null],[13,"Root","","`Node` variant wrapping a `RootNode`.",14,null],[4,"ParseError","","Errors that calling `parse` on the `Parser` can raise.",null,null],[13,"NoMatches","","There were no matches for the token.",15,null],[13,"AmbiguousMatch","","There was more than 1 possible match for the token.",15,null],[4,"VerifyError","","Errors that calling `verify` on the `Parser` can raise.",null,null],[13,"NoCommandAccepted","","No command has been accepted by the parser.",16,null],[13,"MissingParameter","","A required parameter is missing.",16,null],[11,"default","","",17,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Create a new `CommandTree`.",17,{"inputs":[],"output":{"name":"self"}}],[11,"command","","Add a `Command` to the `CommandTree`.",17,{"inputs":[{"name":"commandtree"},{"name":"command"}],"output":null}],[11,"finalize","","Construct the `CommandTree` and produce a `RootNode`.",17,{"inputs":[{"name":"commandtree"}],"output":{"name":"rc"}}],[11,"new","","Construct a default (blank) command with the given `name`.",18,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"hidden","","Mark the command as hidden. Hidden commands will match\nwithin the parser, but are not listed during completion.",18,{"inputs":[{"name":"command"},{"name":"bool"}],"output":{"name":"self"}}],[11,"priority","","Give the command a priority. This is used when sorting\nout conflicts during matching and completion.",18,{"inputs":[{"name":"command"},{"name":"i32"}],"output":{"name":"self"}}],[11,"help","","Supply help text for the command.",18,{"inputs":[{"name":"command"},{"name":"str"}],"output":{"name":"self"}}],[11,"parameter","","Add a [`Parameter`] to the command.",18,{"inputs":[{"name":"command"},{"name":"parameter"}],"output":{"name":"self"}}],[11,"wraps","","The `wrapped_root` signifies the path to the command that should\nbe wrapped by this command. This is used for the `help` command.",18,{"inputs":[{"name":"command"},{"name":"string"}],"output":{"name":"self"}}],[11,"new","","Construct a default (blank) parameter with the given `name`.",19,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"hidden","","Mark the parameter as hidden. Hidden parameters will match\nwithin the parser, but are not listed during completion.",19,{"inputs":[{"name":"parameter"},{"name":"bool"}],"output":{"name":"self"}}],[11,"priority","","Give the parameter a priority. This is used when sorting\nout conflicts during matching and completion.",19,{"inputs":[{"name":"parameter"},{"name":"i32"}],"output":{"name":"self"}}],[11,"repeatable","","Establish whether or not this parameter is repeatable.\nRepeated parameters produce a vector of values and can\nbe given multiple times within a single command invocation.",19,{"inputs":[{"name":"parameter"},{"name":"bool"}],"output":{"name":"self"}}],[11,"alias","","Add an alias that this parameter can use.",19,{"inputs":[{"name":"parameter"},{"name":"str"}],"output":{"name":"self"}}],[11,"help","","Supply the help text for the parameter.",19,{"inputs":[{"name":"parameter"},{"name":"str"}],"output":{"name":"self"}}],[11,"required","","Establish whether or not this parameter is required.",19,{"inputs":[{"name":"parameter"},{"name":"bool"}],"output":{"name":"self"}}],[11,"kind","","Set which type of [`ParameterNode`] is supposed to be created\nto represent this parameter.",19,{"inputs":[{"name":"parameter"},{"name":"parameterkind"}],"output":{"name":"self"}}],[11,"new","","CompletionOption constructor",6,{"inputs":[{"name":"string"},{"name":"bool"}],"output":{"name":"completionoption"}}],[11,"new","","Construct a new Completion.",5,{"inputs":[{"name":"string"},{"name":"string"},{"name":"option"},{"name":"bool"},{"name":"vec"},{"name":"vec"}],"output":{"name":"completion"}}],[11,"eq","","",13,{"inputs":[{"name":"parameterkind"},{"name":"parameterkind"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"parameterkind"},{"name":"parameterkind"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"parameterkind"}],"output":{"name":"parameterkind"}}],[11,"eq","","Nodes are equal based on pointer equality.",14,{"inputs":[{"name":"node"},{"name":"self"}],"output":{"name":"bool"}}],[11,"node","","Get the [`TreeNode`] data for a given `Node`.",14,{"inputs":[{"name":"node"}],"output":{"name":"treenode"}}],[11,"successors","","Get or calculate successors of this node.",14,{"inputs":[{"name":"node"}],"output":{"name":"vec"}}],[11,"accept","","",14,{"inputs":[{"name":"node"},{"name":"parser"},{"name":"token"},{"name":"rc"}],"output":null}],[11,"acceptable","","",14,{"inputs":[{"name":"node"},{"name":"parser"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"complete","","",14,{"inputs":[{"name":"node"},{"name":"option"}],"output":{"name":"completion"}}],[11,"matches","","",14,{"inputs":[{"name":"node"},{"name":"parser"},{"name":"token"}],"output":{"name":"bool"}}],[11,"new","","Create a new `RootNode`",11,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"accept","","",11,{"inputs":[{"name":"rootnode"},{"name":"parser"},{"name":"token"},{"name":"rc"}],"output":null}],[11,"acceptable","","",11,{"inputs":[{"name":"rootnode"},{"name":"parser"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"complete","","A `RootNode` can not be completed.",11,{"inputs":[{"name":"rootnode"},{"name":"option"}],"output":{"name":"completion"}}],[11,"matches","","A `RootNode` can not be matched.",11,{"inputs":[{"name":"rootnode"},{"name":"parser"},{"name":"token"}],"output":{"name":"bool"}}],[11,"new","","Construct a new `CommandNode`.",8,{"inputs":[{"name":"str"},{"name":"option"},{"name":"bool"},{"name":"i32"},{"name":"vec"},{"name":"option"},{"name":"vec"}],"output":{"name":"self"}}],[11,"accept","","Record this command.",8,{"inputs":[{"name":"commandnode"},{"name":"parser"},{"name":"token"},{"name":"rc"}],"output":null}],[11,"acceptable","","",8,{"inputs":[{"name":"commandnode"},{"name":"parser"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"complete","","",8,{"inputs":[{"name":"commandnode"},{"name":"option"}],"output":{"name":"completion"}}],[11,"matches","","",8,{"inputs":[{"name":"commandnode"},{"name":"parser"},{"name":"token"}],"output":{"name":"bool"}}],[11,"new","","Construct a new `ParameterNameNode`.",9,{"inputs":[{"name":"str"},{"name":"bool"},{"name":"i32"},{"name":"vec"},{"name":"bool"},{"name":"option"},{"name":"rc"}],"output":{"name":"self"}}],[11,"accept","","Record this command.",9,{"inputs":[{"name":"parameternamenode"},{"name":"parser"},{"name":"token"},{"name":"rc"}],"output":null}],[11,"acceptable","","",9,{"inputs":[{"name":"parameternamenode"},{"name":"parser"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"complete","","",9,{"inputs":[{"name":"parameternamenode"},{"name":"option"}],"output":{"name":"completion"}}],[11,"matches","","",9,{"inputs":[{"name":"parameternamenode"},{"name":"parser"},{"name":"token"}],"output":{"name":"bool"}}],[11,"new","","Construct a new `ParameterNode`.",10,{"inputs":[{"name":"str"},{"name":"option"},{"name":"bool"},{"name":"i32"},{"name":"vec"},{"name":"bool"},{"name":"option"},{"name":"parameterkind"},{"name":"bool"}],"output":{"name":"self"}}],[11,"accept","","Record this parameter value.",10,{"inputs":[{"name":"parameternode"},{"name":"parser"},{"name":"token"},{"name":"rc"}],"output":null}],[11,"acceptable","","",10,{"inputs":[{"name":"parameternode"},{"name":"parser"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"complete","","By default named and simple parameters complete only to the token\nbeing input while flag parameters complete to the name of the flag.",10,{"inputs":[{"name":"parameternode"},{"name":"option"}],"output":{"name":"completion"}}],[11,"matches","","",10,{"inputs":[{"name":"parameternode"},{"name":"parser"},{"name":"token"}],"output":{"name":"bool"}}],[17,"PRIORITY_DEFAULT","","The default priority.",null,null],[17,"PRIORITY_MINIMUM","","Minimum priority.",null,null],[17,"PRIORITY_PARAMETER","","The default priority for a parameter.",null,null],[8,"NodeOps","","The operations that every node must implement.",null,null],[10,"accept","","Accept this node with the given `token` as data.",20,{"inputs":[{"name":"nodeops"},{"name":"parser"},{"name":"token"},{"name":"rc"}],"output":null}],[10,"acceptable","","Can this node be accepted in the current parser state?\nBy default, a node can be accepted when it hasn&#39;t been seen yet.",20,{"inputs":[{"name":"nodeops"},{"name":"parser"},{"name":"rc"}],"output":{"name":"bool"}}],[10,"complete","","Given a node and an optional token, provide the completion options.",20,{"inputs":[{"name":"nodeops"},{"name":"option"}],"output":{"name":"completion"}}],[10,"matches","","By default, a node matches a `token` when the name of the\nnode starts with the `token`.",20,{"inputs":[{"name":"nodeops"},{"name":"parser"},{"name":"token"}],"output":{"name":"bool"}}],[11,"new","","Construct a parser with a root node.",12,{"inputs":[{"name":"rc"}],"output":{"name":"parser"}}],[11,"complete","","Given an optional token, get the possible valid completions\nfor the current parser state.",12,{"inputs":[{"name":"parser"},{"name":"option"}],"output":{"name":"vec"}}],[11,"parse","","Parse a vector of tokens, advancing through the\nnode hierarchy.",12,{"inputs":[{"name":"parser"},{"name":"vec"}],"output":{"name":"result"}}],[11,"advance","","Parse a single token, advancing through the node hierarchy.",12,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"result"}}],[11,"execute","","Execute the command that has been accepted by the parser.",12,{"inputs":[{"name":"parser"}],"output":null}],[11,"verify","","Verify that the parser is in a valid state with\nrespect to having accepted a command and all\nrequired parameters.",12,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",15,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",15,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",15,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"verifyerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"verifyerror"}],"output":{"name":"verifyerror"}}],[11,"description","","",16,{"inputs":[{"name":"verifyerror"}],"output":{"name":"str"}}],[11,"fmt","","",16,{"inputs":[{"name":"verifyerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"tokenizer","commands","# Command Tokenization",null,null],[3,"SourceOffset","commands::tokenizer","A position within a body of text.",null,null],[12,"char","","The index of this character within the body of text.",21,null],[12,"line","","The line number on which this character may be found.",21,null],[12,"column","","The column on which this character may be found.",21,null],[3,"SourceLocation","","A range within a body of text.",null,null],[12,"start","","The start of the range.",22,null],[12,"end","","The end of the range.",22,null],[3,"Token","","A token from a body of text.",null,null],[12,"text","","The text of the token.",23,null],[12,"token_type","","The type of the token (`Whitespace` or `Word`).",23,null],[12,"location","","The location of the token in the source body of text.",23,null],[4,"TokenizerError","","Errors",null,null],[13,"CharacterNotAllowedHere","","Character not allowed here",24,null],[13,"SpecialNotYetImplemented","","Special not yet implemented",24,null],[13,"EscapingBackslashAtEndOfInput","","Escaping backslash at end of input",24,null],[13,"UnclosedDoubleQuoteAtEndOfInput","","Unclosed double quote at end of input",24,null],[13,"UnclosedSingleQuoteAtEndOfInput","","Unclosed single quote at end of input",24,null],[4,"TokenType","","The role that a token plays: `Whitespace` or `Word`.",null,null],[13,"Whitespace","","The token represents whitespace and not a word.",25,null],[13,"Word","","The token represents a word within the body of text. This\ntakes double quoted strings into account.",25,null],[5,"tokenize","","Tokenize a body of text.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"sourceoffset"},{"name":"sourceoffset"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"sourceoffset"},{"name":"sourceoffset"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"sourceoffset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"sourceoffset"}],"output":{"name":"sourceoffset"}}],[11,"new","","Construct a `SourceOffset`.",21,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"sourceoffset"}}],[11,"eq","","",22,{"inputs":[{"name":"sourcelocation"},{"name":"sourcelocation"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"sourcelocation"},{"name":"sourcelocation"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"sourcelocation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"sourcelocation"}],"output":{"name":"sourcelocation"}}],[11,"new","","Construct a `SourceLocation`.",22,{"inputs":[{"name":"sourceoffset"},{"name":"sourceoffset"}],"output":{"name":"sourcelocation"}}],[11,"fmt","","",24,{"inputs":[{"name":"tokenizererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"tokenizererror"}],"output":{"name":"tokenizererror"}}],[11,"description","","",24,{"inputs":[{"name":"tokenizererror"}],"output":{"name":"str"}}],[11,"fmt","","",24,{"inputs":[{"name":"tokenizererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"tokentype"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"tokentype"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"fmt","","",25,{"inputs":[{"name":"tokentype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"tokentype"}],"output":{"name":"tokentype"}}],[11,"eq","","",23,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"token"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"token"}],"output":{"name":"token"}}],[11,"new","","Construct a `Token`. The lifetime parameter `&#39;text` refers\nto the lifetime of the text being tokenized.",23,{"inputs":[{"name":"str"},{"name":"tokentype"},{"name":"sourcelocation"}],"output":{"name":"token"}}],[0,"util","commands","Utilities",null,null],[5,"longest_common_prefix","commands::util","Longest Common Prefix",null,{"inputs":[{"name":"vec"}],"output":{"name":"str"}}]],"paths":[[3,"CommandTableEntry"],[3,"CommandTable"],[8,"Command"],[3,"MenuDefinition"],[4,"MenuItem"],[3,"Completion"],[3,"CompletionOption"],[3,"TreeNode"],[3,"CommandNode"],[3,"ParameterNameNode"],[3,"ParameterNode"],[3,"RootNode"],[3,"Parser"],[4,"ParameterKind"],[4,"Node"],[4,"ParseError"],[4,"VerifyError"],[3,"CommandTree"],[3,"Command"],[3,"Parameter"],[8,"NodeOps"],[3,"SourceOffset"],[3,"SourceLocation"],[3,"Token"],[4,"TokenizerError"],[4,"TokenType"]]};
initSearch(searchIndex);
